---
title: Theming engine refactoring
layout: docs
---

:doctitle: Theming engine refactoring
:notitle:

== Current situation

Currently, defining an application skin in QSkinny works the following way:
The user writes his skin in a subclass of QSkSkin, which defines its look and
feel, like colors, metrics, flags, fonts etc. The individual hints are a flat
list which are entered through a skin hint table (`QskSkinHintTable`).

Here are some examples for skin hints:

```
setGradient( Section::Separator, m_palette->separator );
setPadding( Section::Separator, QskMargins( 2, 30, 2, 50 ) );
setMetric( Section::Separator | QskAspect::Size, 2 );
setGradient( Section::SeparatorSmall, m_palette->separator );
```

This defines some skin hints for the `Section` class. The palette above is
defined in user code, and not on QSkinny level.

As visible above, skin hints are usually defined for a subcontrol, optionally
combined with a state or another aspect.

=== Issues with the current situation

* Colors (and metrics etc.) need to be defined for each control, as there is no
concept of a global palette. E.g. in the example above, the gradients for
the `Separator` and `SeparatorSmall` subcontrols are the same, but need to be
defined separately.
* Each stylable part of a control, e.g. a subcontrol, needs to be defined by the
user. Many controls have a `Panel` subcontrol defined just to make styling
possible.
* There is no support for themes (e.g. night vs. day theme) on a QSkinny level;
as of now that logic needs to be defined by the user, including switching
themes etc.


== Comparison to other theming engines

=== Google (Flutter / Material)

Flutter comes with so-called themes which are similar to skins in the QSkinny
world. In Flutter, each app has an app-wide theme (class `ThemeData`) which
contains descriptions for colors, fonts and more.

Part of an application can have a different theme, either by creating a new
instance of `ThemeData` or by extending the parent theme. For more information,
see the https://flutter.dev/docs/cookbook/design/themes[Flutter documentation].

The color roles defined by Flutter match the Material color scheme: E.g. the
https://api.flutter.dev/flutter/material/ThemeData-class.html[ThemeData] class
has color roles for `accentColor`, `backgroundColor` and so on; similar roles
also exist in the
https://material.io/design/color/the-color-system.html#color-theme-creation[Material color theme].

Interestingly it seems that Flutter themes are not extensible, i.e. they contain
fixed attributes for colors like `backgroundColor`, `textButtonTheme` etc., but
the user cannot add own attributes. This makes it look like it is tailored
to being used with the Material style.


=== Microsoft (UWP)

Also Microsoft comes with styles for desktop apps (UWP), Web Apps (Fluent UI,
a React framework) and more. It seems they are trying to make the UIs look the
same for all of their platforms, even though they are spread across multiple
technologies.

The https://docs.microsoft.com/en-us/windows/uwp/design/[Microsoft design]
doesn't come with completely open guidance like the Material style, but there
are some colors and metrics given: E.g. there is a common style (~ QSkinny skin)
with a light and dark theme, which for each theme contains named colors like
`ListLow`, `BaseHigh` etc.

Also, there is a so-called
"https://docs.microsoft.com/en-us/windows/uwp/design/style/color#accent-color[accent color]"
which is used to highlight elements, for instance a checked box or a selected
element in a list view. In addition there is a concept of a palette which
deduces three brighter and three darker colors from the accent color. However,
there doesn't seem to be any information on how to generate those colors.


=== Apple

The https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/color/[Apple style]
also has a concept called "semantic colors" for labels, separators and links.
Of course the Apple documentation is not as open as the Material style and only
describes color values, in contrast to round edges and other metrics.

=== Qt theming

==== QtWidgets theming

QtWidgets can be styled with a `QPalette`, which contains a fixed list of color
roles like `Foreground`, `Background` and `Base`. This seems similar to what
Flutter is doing; also here there is no way to add user defined roles, which
makes it hard to cover color roles for all controls, including user defined
ones.

==== Qt 6.2 theming

There seems to be nothing new planned, at least the page about
https://wiki.qt.io/New_Features_in_Qt_6.2[New features in Qt 6.2] does not
mention a new styling architecture.


== Proposed new architecture

The proposed architecture should encompass the following principles:

=== global palette / skin hints

A global palette like Flutter has would be a good thing to have in QSkinny as
well: From a design point of view, it would be ideal if controls reused the
same set of colors: E.g. the
https://material.io/design/color/the-color-system.html#color-theme-creation[Material color theme]
has controls for `Primary`, `Background`, `Error` and more.

These colors could be used by many of the controls, for instance the background
color of a push button would for many skins be the same as the background color
for a radio button. In real-life use cases, there are a handful of colors which
are often reused across controls, so many projects would profit from a global
palette.

In addition to colors, other skin hints like corner rounding could be a global
setting: E.g. the
https://docs.microsoft.com/en-us/windows/uwp/design/style/rounded-corner[Microsoft UWP Style]
states that "rectangle UI elements" like buttons, combo boxes etc. all have
2 pixels of rounding, while overlay elements like dialogs or tabs should all
have rounded corners of 4 pixels.

=== named color roles (extensible)

Named color roles for palettes (global and others) should make it easy to
structure a skin logically. On a QSkinny level, we could only add a few basic
names like foreground, background and so on, and leave it up to user written
skins to define more roles. This means that an own style should be able to add
its own color roles to a palette, similar to states or subcontrols in QSkinny.
For instance a Material style could add Material color roles like Primary,
Background etc., while a
https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/xaml-theme-resources#guidelines-for-custom-theme-resources[Microsoft UWP style]
would have roles like BaseHigh, ListAccentMedium or ChromeDisabledLow.

However, skinlet etc. would need to access background colors etc., so we would
need to define some basic roles.

=== color roles overridable by controls

Also, it should be possible to override color roles for controls: E.g. a push
button could have a different background color than the global palette or other
controls. However, in general there is no need to define colors for each
controls because of the global palette. Overriding and defining new color names
should be possible per class (e.g. for all push buttons) and for single
instances.

=== theming for user-defined controls

It should also be possible to theme user controls, as is possible already with
QSkinny. This would be a big advantage over Flutter or the Qt approach:
Palettes and other hints should be defined the same way for controls that are
part of QSkinny and for user-defined ones. The same way user-defined skinlets
should be able to access palettes defined in QSkinny.

Below are architectural images of the proposed design:

.Palette hierarchy
image::../images/theming-engine-refactoring.jpg[Palette hierarchy]

A lookup would just traverse the object inheritance hierarchy until it finds
a matching hint, e.g. `QskPushButton` -> `QskAbstractButton` -> `QskControl`;
this suggests that the palette from `QskControl` could serve as a global
palette.

.Palette lookup logic
image::../images/theming-engine-refactoring-lookup.jpg[Palette hierarchy]

A sample implementation of a skin reusing palette colors could look like this:

```
[global palette]
primaryColor = Qt::magenta;
backgroundColor = Qt::white;

[push button skinlet]
updateBoxNode( palette->primaryColor );
updateTextNode( palette->backgroundColor );

[checkbox skinlet]
updateBoxNode( Checked, palette->primaryColor );
updateBoxNode( Unchecked, palette->backgroundColor );
```
